#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <stdbool.h>
#include <math.h>
#include <time.h>
#include <conio.h>
#define H 19
#define W 38

FILE *pdosya;

void liderlikTablosunaKayitEkle();
void liderlikTablosuYazdir();
void ekraniTemizle();
void gameOverYaz();	
void anaMenuOlustur();	
void haritaTemizle();
void haritaOlustur();
int yemOlustur();
bool canavarYonKontrol(int x, int y);
int canavarPacManArasiMesafeHesap(int koorX, int koorY, int yon);
void canavarYonBelirle();		
int canavarHareketEt();
void pacManHareketInput();
int pacManHareketEt();


void set_cursor_position(int x, int y)
{
   COORD coord = { x, y };
   SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
} 


void hidecursor()
{
   HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
   CONSOLE_CURSOR_INFO info;
   info.dwSize = 100;
   info.bVisible = FALSE;
   SetConsoleCursorInfo(consoleHandle, &info);
}

char harita[H][W] =
{
   { "######################################" },
   { "#                                    #" },                             
   { "# ########### ########### ########## #" },                                               
   { "# #         # #         # #          #" },       
   { "# # ####### # # ####### # # ######## #" },  
   { "# #         # # ####### # # ######## #" }, 
   { "# # ######### #         # # ######## #" }, 
   { "# # ######### # ####### # #          #" }, 
   { "# # ######### # ####### # ########## #" }, 
   { "#                                    #" },
   { "# ############# ########## ######### #" },        
   { "# #           # #        # #    ##   #" },      
   { "# # ### # ### # # ###### # # ## ## # #" },         
   { "# # ### # ### # # ###### # # ## ## # #" },
   { "# # ### # ### # #        # # ## ## # #" },                                    
   { "# # ### # ### # # ###### # # ## ## # #" },
   { "# # ### # ### # # ###### # # ## ## # #" },
   { "#                                    #" },
   { "######################################" }
};


enum canavarYon{UP = 119, DOWN = 115, RIGHT = 100, LEFT = 97};

typedef struct Hareket{
	
	int konumX;
	int konumY;
	int hareketX;
	int hareketY;
	int yon;	
} hareket;


struct canavarBilgileri{
	
	int tempYon;
	double enKisaMesafe;
	hareket canavar;
}Canavar;


struct pacManBilgileri{
	
	hareket pacMan;	
}PacMan;

struct oyuncuBilgileri{
	
	int oyuncuNumarasi;
	char isim[20];
	int skor;	
}Oyuncu,oyuncuOkuma;

int yemKontrol = 0;

int main() {	
	
		
	
	while(1)
	{	
	anaMenuOlustur();
	
	int anaMenuKomutAl=getch();
	
	if(anaMenuKomutAl == 'q' || anaMenuKomutAl == 'Q')
	{
		return 0;
	}
		
	if(anaMenuKomutAl == 'w' || anaMenuKomutAl == 'W')	
	{
		ekraniTemizle();
		
		liderlikTablosuYazdir();
		
		printf("Ana menuye donmek icin herhangi bir tusa bas");
	
		getch();
	}
	
	if(anaMenuKomutAl=='e'||anaMenuKomutAl=='E')
	{
	
	ekraniTemizle();	
	
	int x, y; 
	Oyuncu.skor = 0;
			
	PacMan.pacMan.konumX = 15;
	PacMan.pacMan.konumY = 17;
	PacMan.pacMan.hareketX = 0;
	PacMan.pacMan.hareketY = 0;
	
	Canavar.canavar.konumX = 1;
	Canavar.canavar.konumY = 1;
	
	haritaTemizle();
	
	while(1) {
		
		set_cursor_position(0,0);
		hidecursor();
		
		haritaOlustur();
		
		if(yemKontrol==0)		
		yemOlustur();
		
		y = canavarHareketEt();
		canavarYonBelirle();
		pacManHareketInput();
		x = pacManHareketEt();	
			
		if(x == 0 || y == 0) {
		
			gameOverYaz();
			
			liderlikTablosunaKayitEkle();
			
			break;		
		}
	  }	
	}
	
	}
	
}

void liderlikTablosunaKayitEkle(){
	
	
			if((pdosya=fopen("OyuncuBilgi.txt","ab+"))==NULL)
			{
			printf("dosya acilamadı...\n"); exit(1);
			}
			
			fread(&oyuncuOkuma,sizeof(oyuncuOkuma),1,pdosya);
			
			fclose(pdosya);
			
			if((pdosya=fopen("OyuncuBilgi.txt","ab+"))==NULL)
			{
				printf("dosya acilamadi...");   exit(1);
			}
			
			if(Oyuncu.oyuncuNumarasi==NULL)
			{
				Oyuncu.oyuncuNumarasi=1;
			}
			else
			{
				Oyuncu.oyuncuNumarasi=oyuncuOkuma.oyuncuNumarasi+1;
			}
			
			printf("Kullanici adi:"); gets(Oyuncu.isim);
			
			fseek(pdosya,(Oyuncu.oyuncuNumarasi-1)*sizeof(Oyuncu),SEEK_SET);
			
			if(fwrite(&Oyuncu,sizeof(Oyuncu),1,pdosya)!=1)
			{
			printf("yazma hatası\n"); exit(1);
			}
			
			rewind(pdosya);
							
			fclose(pdosya); 
	
}

void liderlikTablosuYazdir(){
	
	if((pdosya=fopen("OyuncuBilgi.txt","ab+"))==NULL)
			{
			printf("dosya acilamadı...\n"); exit(1);
			}
			
	while(fread(&oyuncuOkuma,sizeof(oyuncuOkuma),1,pdosya))
	{
		printf("Kullanici adi:%s\t",oyuncuOkuma.isim);
		printf("Skoru:%d\n",oyuncuOkuma.skor);
		printf("\n");
	}
}

void haritaTemizle() {
	
	int i,j;
		
	for(i = 0; i < H; i++) {

		for(j = 0; j < W; j++) {

			if(harita[i][j]=='@' || harita[i][j]=='&')
			harita[i][j]=' ';	
		}
	}	
}
	
void haritaOlustur() {
	
	usleep(100000);
	
	int i,j;
		
	for(i = 0; i < H; i++) {

		for(j = 0; j < W; j++) {

			printf("%c",harita[i][j]);		
		}

		printf("\n");
	}	
	
	printf("Skor: %d\n", Oyuncu.skor);
}

void gameOverYaz(){
	
	system("cls");
	
	printf("*********************************************************\n\n");
	
	printf("\t\t\t GAME OVER \n\n");
	
	printf("*********************************************************\n\n");
	
	printf("Skorunuz:%d \n\n",Oyuncu.skor);
}

void anaMenuOlustur() {
	
	system("cls");
	
	printf("*********************************************************\n");
	
	printf("PacMan v1 \n\n");
	printf("Oyuna baslamak icin e tusuna bas \n\n");
	printf("Liderlik tablosu için w tusuna bas\n\n");
	printf("Oyundan cikmak icin q tusuna bas\n\n");
	
	printf("*********************************************************");
}

bool canavarYonKontrol(int x, int y) {
	
	if(harita[y][x] != '#' && harita[y][x] != '+'){
		
		return true;		
	
	} else {
		
		return false;		
	}	
}


int canavarPacManArasiMesafeHesap(int koordinatX, int koordinatY, int yon) {
	
	int mesafeX, mesafeY; 
	double Mesafe;
	
	mesafeX = koordinatX - PacMan.pacMan.konumX;
	mesafeY = koordinatY - PacMan.pacMan.konumY;
	
	Mesafe = mesafeX * mesafeX + mesafeY * mesafeY;
	
	if(Mesafe < Canavar.enKisaMesafe) {
		
		Canavar.enKisaMesafe = Mesafe;	
		Canavar.tempYon = yon;
	
	} else if(Mesafe == Canavar.enKisaMesafe){
		
		return 0;
	}
}

void ekraniTemizle(){
	
	system("cls");
}

void canavarYonBelirle(){
	
	if(Canavar.canavar.yon != LEFT && canavarYonKontrol(Canavar.canavar.konumX+1, Canavar.canavar.konumY)) {
		
		canavarPacManArasiMesafeHesap(Canavar.canavar.konumX+1, Canavar.canavar.konumY, RIGHT);	
	}
	
	if(Canavar.canavar.yon != RIGHT && canavarYonKontrol(Canavar.canavar.konumX-1, Canavar.canavar.konumY)) {
		
		canavarPacManArasiMesafeHesap(Canavar.canavar.konumX-1, Canavar.canavar.konumY, LEFT);		
	}
	
	if(Canavar.canavar.yon != UP && canavarYonKontrol(Canavar.canavar.konumX, Canavar.canavar.konumY+1)) {
		
		canavarPacManArasiMesafeHesap(Canavar.canavar.konumX, Canavar.canavar.konumY+1, DOWN);		
	}
	
	if(Canavar.canavar.yon != DOWN && canavarYonKontrol(Canavar.canavar.konumX, Canavar.canavar.konumY-1)) {
		
		canavarPacManArasiMesafeHesap(Canavar.canavar.konumX, Canavar.canavar.konumY-1, UP);		
	}	
	
	Canavar.canavar.yon = Canavar.tempYon;
	Canavar.enKisaMesafe = 1000;	
}


int canavarHareketEt() {		
		
	int kontrolX, kontrolY;
	
	switch(Canavar.canavar.yon) {
		
		case UP:
			Canavar.canavar.hareketX = 0;
			Canavar.canavar.hareketY = -1;
			break;
			
		case DOWN:
			Canavar.canavar.hareketX = 0;
			Canavar.canavar.hareketY = 1;
			break;
		
		case LEFT:
			Canavar.canavar.hareketX = -1;
			Canavar.canavar.hareketY = 0;
			break;
			
		case RIGHT:
			Canavar.canavar.hareketX = 1;         
			Canavar.canavar.hareketY = 0;
			break;							
		}
		
		kontrolX = Canavar.canavar.konumX + Canavar.canavar.hareketX;
		kontrolY = Canavar.canavar.konumY + Canavar.canavar.hareketY;
				
		if(!canavarYonKontrol(kontrolX, kontrolY)) {
		
			Canavar.canavar.hareketX = 0;
			Canavar.canavar.hareketY = 0;		
				
		} else if(harita[kontrolY][kontrolX] == '@') {
			
			return 0;
		}
		
		else {
				
    		harita[Canavar.canavar.konumY][Canavar.canavar.konumX] =' ';		
			
			Canavar.canavar.konumX += Canavar.canavar.hareketX;
			Canavar.canavar.konumY += Canavar.canavar.hareketY;
		
			harita[Canavar.canavar.konumY][Canavar.canavar.konumX] ='&';	
		}
}


void pacManHareketInput() {

	if(kbhit()){

		switch(getch()) {

			case 'w':
				PacMan.pacMan.hareketX = 0;
				PacMan.pacMan.hareketY = -1;
		  		break;
		  		
		  	case 'W':
				PacMan.pacMan.hareketX = 0;
				PacMan.pacMan.hareketY = -1;
		  		break;

		  	case 's':
				PacMan.pacMan.hareketX = 0;
				PacMan.pacMan.hareketY = +1;
		  		break;
		  		
		  	case 'S':
				PacMan.pacMan.hareketX = 0;
				PacMan.pacMan.hareketY = +1;
		  		break;

		  	case 'a':
				PacMan.pacMan.hareketX = -1;
				PacMan.pacMan.hareketY = 0;
		  		break;
		  		
		  	case 'A':
				PacMan.pacMan.hareketX = -1;
				PacMan.pacMan.hareketY = 0;
		  		break;

		  	case 'd':
				PacMan.pacMan.hareketX = +1;
				PacMan.pacMan.hareketY = 0;
		  		break;	
		  		
		  	case 'D':
				PacMan.pacMan.hareketX = +1;
				PacMan.pacMan.hareketY = 0;
		  		break;		  			
		}
	}		
}	


int yemOlustur() {
	
	int yemKonumX,yemKonumY;
	
	//srand(time(NULL));	
		
	yemKonumX = rand() % W; 
	
	yemKonumY = rand() % H; 
	
	if(harita[yemKonumY][yemKonumX]!= '#' && harita[yemKonumY][yemKonumX]!= '@' && harita[yemKonumY][yemKonumX]!= '&')
	{
		harita[yemKonumY][yemKonumX] = '+';
		yemKontrol++;
		
	}
	else
	{
		return yemOlustur();
	}
	
}

int pacManHareketEt() {

	int kontrolX, kontrolY;

	kontrolX = PacMan.pacMan.konumX + PacMan.pacMan.hareketX;
	kontrolY = PacMan.pacMan.konumY + PacMan.pacMan.hareketY;

	if(harita[kontrolY][kontrolX] == '#') {

		PacMan.pacMan.hareketX = 0;
		PacMan.pacMan.hareketY = 0;	
	} 
	
	if(harita[kontrolY][kontrolX] == '&') {
		
		return 0;				
	}
	
	else {
		
		harita[PacMan.pacMan.konumY][PacMan.pacMan.konumX] = ' ';
		
		PacMan.pacMan.konumX += PacMan.pacMan.hareketX;
		PacMan.pacMan.konumY += PacMan.pacMan.hareketY;
		
		if(harita[PacMan.pacMan.konumY][PacMan.pacMan.konumX] == '+') {
		
			Oyuncu.skor++;
			yemKontrol = 0;				
		}
							
		harita[PacMan.pacMan.konumY][PacMan.pacMan.konumX] = '@';						
	}	
}